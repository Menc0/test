<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jaxws="http://cxf.apache.org/jaxws"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://cxf.apache.org/jaxws 
    http://cxf.apache.org/schemas/jaxws.xsd">
 
		<!-- 扫描注解配置的包 -->
	<context:component-scan base-package="net.spring.*"/> 
		<!-- 配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver"/>
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/springmvc"/>
		<property name="user" value="root"/>
		<property name="password" value=""/>
		
		<!-- 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default:3 -->
		<property name="initialPoolSize" value="1"/>
		<!-- 连接池中保留的最小连接数 -->
		<property name="minPoolSize" value="1"/>
		<!-- 连接池中保持的最大连接数。Default:15 -->
		<property name="maxPoolSize" value="300"/>
		<!-- 最大空闲时间，60秒内未使用则被丢弃。若为0则永不丢弃。Default：0 -->
		<property name="maxIdleTime" value="60" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次性同时获取的连接数。Default:3 -->
		<property name="acquireIncrement" value="5" />
		<!-- 每60秒检查所有连接池中的空闲连接。Default:0 -->
		<property name="idleConnectionTestPeriod" value="60"/>

	</bean>
		<jaxws:endpoint id="IsshWsTitle" implementorClass="net.spring.webservice.IsshWs" address="/cxfssh">
		<jaxws:implementor>
			<bean id="webservice" class="net.spring.webservice.impl.SshWsImpl">
				<property name="userService" ref="userService"/>
			</bean>
		</jaxws:implementor>
	</jaxws:endpoint>
	<import resource="classpath:META-INF/cxf/cxf.xml" />  
    <import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" />  
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml" />  
	<bean id="nativeJdbcExtractor" class="org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor">
		
	</bean>
	<!-- hibernate4的配置？？ -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" >
		<property name="dataSource" ref="dataSource"/>
		<property name="annotatedClasses">
			<list>
				<value>net.spring.model.User</value>
<!--				<value>tv.ssdm.haoxiang.bean.WlBean</value>-->
<!--				<value>tv.ssdm.haoxiang.bean.WmBean</value>-->
<!--				<value>tv.ssdm.haoxiang.bean.WsBean</value>-->
<!--				<value>tv.ssdm.haoxiang.bean.XHSItemBean</value>-->
<!--				<value>tv.ssdm.haoxiang.bean.THItemBean</value>-->
			</list>
		</property>
		<property name="hibernateProperties">
			<value>
				property name=”dialect”>org.hibernate.dialect.MySQL5Dialect
				hibernate.hbm2ddl.auto=update
				hibernate.show_sql=false
				hibernate.format_sql=true
				<!-- %%%%%%%%%%%%%%%%%%%%%%%%%%使用EHCache二级缓存%%%%%%%%%%%%%%%%%%%%%%%%%% -->
				hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
				hibernate.cache.use_query_cache=true;
				<!-- hibernate4Session -->
				hibernate.current_session_context_class=org.springframework.orm.hibernate4.SpringSessionContext
				
			</value>
		</property>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<!-- 使用基于注解方式管理事务 -->
	<tx:annotation-driven transaction-manager="txManager" />
	
	
	<tx:advice id="txAdvice"><!-- 默认引用 transactionManager -->
		<tx:attributes>
			<!-- 方法名以add开头，必须开启事务 -->
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<!-- com.sh包下 所有名字以I*Service结尾的类中 所有方法 -->
		<aop:pointcut expression="execution(* net.spring..*Service.*(..))"
			id="allServiceMethod" />
		<!-- 为 allServiceMethod 增强 txAdvice -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allServiceMethod" />
	</aop:config>


	<!-- spring 依赖注入 -->
	
<!-- 该 BeanPostProcessor 将自动对标注 @Autowired 的 Bean 进行注入 srping2.5之后（2013-10-18）-->     

	  <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/> 
	   
	
<!-- spring传统的通过配置文件依赖注入的方式 spring2.5之前 -->
<!-- 	<bean name="studao" class="com.zhang.dao.impl.StuDaoImpl"> -->
<!-- 		<property name="sessionFactory" ref="sessionFactory"></property> -->
<!-- 	</bean> -->
<!-- 	<bean name="stuservice" class="com.zhang.service.impl.StuServiceImpl"> -->
<!-- 		<property name="studao" ref="studao"></property> -->
<!-- 	</bean> -->
<!-- 	<bean name="stuAction" class="com.zhang.action.StuAction"> -->
<!-- 		<property name="stuservice" ref="stuservice"></property> -->
<!-- 	</bean> -->
	
	</beans>